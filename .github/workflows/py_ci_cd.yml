name: Python CI/CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - id: keyword_check
        name: Check for keyword in commit message
        run: echo "contains_keyword=$(echo '${{ github.event.head_commit.message }}' | grep -qP '.(deploy|test)\b' && echo true || echo false)" >> $GITHUB_ENV

      - id: checkout
        uses: actions/checkout@main

      - id: setup_python
        name: Set up Python
        uses: actions/setup-python@main
        with:
          python-version: "3.12.0"

      - id: install_dependencies
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install twine
          pip install sphinx
          pip install sphinx-rtd-theme

      - id: create_tag
        name: Create & Push tag
        run: |
          TAG=$(echo '${{ github.event.head_commit.message }}' | grep -oP '.tag\[\K(.*?)(?=\])')
          if [ -n "$TAG" ]; then
            git tag $TAG
            git push origin $TAG
          else
            TAG="NULL"
            git tag $TAG
            git push origin $TAG
            echo "No tag found in commit message. Using default tag."
          fi
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
        shell: bash

      - id: run_unittests
        name: Run unittests
        run: python -m unittest discover -s StenLib/tests

      - id: build_package
        name: Build package
        run: python -m build

      - id: create_release
        name: Create GitHub Release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.create_tag.outputs.TAG }}
        with:
          tag_name: ${{ env.TAG }}
          draft: false
          prerelease: false

      - id: publish_to_pypi
        name: Publish package to PyPI
        if: contains(github.event.head_commit.message, '.deploy')
        run: twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - id: publish_to_testpypi
        name: Publish package to TestPyPI
        if: contains(github.event.head_commit.message, '.test')
        run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}

      - id: build_docs
        name: Build Sphinx Documentation
        run: make html
        working-directory: StenLib/docs

      - id: install_ssh_key
        name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - id: add_known_hosts
        name: Adding Known Hosts
        run: ssh-keyscan -4 -v -p ${{ secrets.SSH_HOST_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - id: copy_docs
        name: Copy docs to webserver
        run: sshpass -p '${{ secrets.SSH_KEY_PASS }}' scp -o HostKeyAlgorithms=ssh-rsa,ssh-dss -P ${{ secrets.SSH_HOST_PORT }} -r ./StenLib/docs/build/html/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_HOST_PATH }}

  create_badge:
    # needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with : 
          auth: ${{ secrets.GIST_SECRET }}
          gistID: <gist-ID>
          filename: test.json
          label: Hello
          message: World
          color: orange