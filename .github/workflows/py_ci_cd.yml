name: Sten's Python CI/CD
run-name: "Sten's Python CI/CD"

on:
  push:
    branches: [main]

jobs:
  keyword_check:
    name: Keyword Check
    runs-on: ${{ matrix.os }}
    if: contains(github.event.head_commit.message, '.deploy')
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - id: keyword_check
        run: echo "Keyword Check Passed"

  code_quality:
    name: Code Quality Check
    needs: [keyword_check]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        version: [3.12]
    steps:
      - id: checkout
        uses: actions/checkout@main

      - id: setup_python
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.version }}
          cache: "pip"

      - id: run_ruff
        uses: chartboost/ruff-action@main
        with:
          args: -q

      - id: code_quality_badge
        if: always()
        uses: schneegans/dynamic-badges-action@master
        with:
          auth: ${{ secrets.GIST_ACCESS_TOKEN }}
          gistID: ${{ secrets.GIST_ID }}
          filename: code_quality_badge.json
          label: Code Quality
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
          namedLogo: codacy
          logoColor: white
          style: flat-square

  pytest:
    name: Pytests
    needs: [keyword_check]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        version: [3.12]
    steps:
      - id: checkout
        uses: actions/checkout@main

      - id: setup_python
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.version }}
          cache: "pip"

      - id: install_dependencies
        name: Install Dependencies
        run: |
          pip install pytest
          pip install pytest-md

      - id: test_run_and_report
        uses: pavelzw/pytest-action@main
        with:
          verbose: true
          emoji: false
          job-summary: true
          custom-arguments: "-q"
          click-to-expand: true
          report-title: "Pytest Report for OS: ${{ matrix.os }} and Python: ${{ matrix.version }}"

      - id: pytest_badge
        if: always()
        uses: schneegans/dynamic-badges-action@master
        with:
          auth: ${{ secrets.GIST_ACCESS_TOKEN }}
          gistID: ${{ secrets.GIST_ID }}
          filename: pytest_badge.json
          label: Pytest
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
          namedLogo: pytest
          logoColor: white
          style: flat-square

  release:
    name: Release
    needs: [pytest, code_quality]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        version: [3.12]
    steps:
      - id: checkout
        uses: actions/checkout@main

      - id: setup_python
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.version }}
          cache: "pip"

      - id: install_dependencies
        name: Install Dependencies
        run: |
          pip install build
          pip install setuptools

      - id: build_package
        name: Build Package
        run: python -m build

      - id: create_tag
        name: Create & Push Tag
        run: echo TAG=$(python setup.py --version) >> $GITHUB_OUTPUT
        shell: bash

      - id: create_release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.TAG }}
          draft: false
          prerelease: false

      - id: release_badge
        if: always()
        uses: schneegans/dynamic-badges-action@master
        with:
          auth: ${{ secrets.GIST_ACCESS_TOKEN }}
          gistID: ${{ secrets.GIST_ID }}
          filename: release_badge.json
          label: Release
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
          namedLogo: hackthebox
          logoColor: white
          style: flat-square

  publish:
    name: Publish
    needs: [pytest, code_quality]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        version: [3.12]
    permissions:
      id-token: write
    steps:
      - id: checkout
        uses: actions/checkout@main

      - id: setup_python
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.version }}
          cache: "pip"

      - id: install_dependencies
        name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install build
          pip install twine

      - id: build_package
        name: Build Package
        run: python -m build

      - id: publish_to_pypi
        uses: pypa/gh-action-pypi-publish@release/v1

      - id: pypi_badge
        if: always()
        uses: schneegans/dynamic-badges-action@master
        with:
          auth: ${{ secrets.GIST_ACCESS_TOKEN }}
          gistID: ${{ secrets.GIST_ID }}
          filename: pypi_badge.json
          label: PyPI
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
          namedLogo: pypi
          logoColor: white
          style: flat-square

  documentation:
    name: Documentation
    needs: [pytest, code_quality]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        version: [3.12]
    steps:
      - id: checkout
        uses: actions/checkout@main

      - id: setup_python
        uses: actions/setup-python@main
        with:
          python-version: ${{ matrix.version }}
          cache: "pip"

      - id: install_dependencies
        name: Install Dependencies
        run: |
          pip install sphinx
          pip install sphinx_rtd_theme

      - id: build_docs
        name: Build Sphinx Documentation
        run: make html
        working-directory: StenLib/docs

      - id: deploy_docs
        uses: SamKirkland/FTP-Deploy-Action@master
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          protocol: ${{ secrets.FTP_PROTOCOL }}
          local-dir: ${{ secrets.FTP_LOCAL_DIR }}
          server-dir: ${{ secrets.FTP_SERVER_DIR }}

      - id: docs_badge
        if: always()
        uses: schneegans/dynamic-badges-action@master
        with:
          auth: ${{ secrets.GIST_ACCESS_TOKEN }}
          gistID: ${{ secrets.GIST_ID }}
          filename: docs_badge.json
          label: Docs
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
          namedLogo: googledocs
          logoColor: white
          style: flat-square
