name: Python CI/CD

on:
  push:
    branches:
      - main

jobs:
  setup_and_build:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '.deploy')

    steps:
      - id: checkout
        uses: actions/checkout@main

      - id: setup_python
        uses: actions/setup-python@main
        with:
          python-version: "3.12"
          cache: "pip"

      - id: install_dependencies
        name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install build
          pip install twine

      - id: build_package
        name: Build Package
        run: python -m build

      - id: build_badge
        if: always()
        uses: schneegans/dynamic-badges-action@master
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: build-badge.json
          label: Build
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
          namedLogo: windowsterminal
          style: flat-square

  test:
    needs: setup_and_build
    runs-on: ubuntu-latest

    steps:
      - id: run_unittests
        name: Run Unittests
        run: python -m unittest discover -s StenLib/tests

      - id: unittest_badge
        if: always()
        uses: schneegans/dynamic-badges-action@master
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: unittest-badge.json
          label: Unittest
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
          namedLogo: pytest
          style: flat-square

  release:
    needs: setup_and_build
    runs-on: ubuntu-latest

    steps:
      - id: create_tag
        name: Create & Push Tag
        run: |
          TAG=$(echo '${{ github.event.head_commit.message }}' | grep -oP '.tag\[\K(.*?)(?=\])')
          if [ -n "$TAG" ]; then
            git tag $TAG
            git push origin $TAG
          else
            TAG="NULL"
            git tag $TAG
            git push origin $TAG
            echo "No tag found in commit message. Using default tag."
          fi
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
        shell: bash

      - id: create_release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.create_tag.outputs.TAG }}
        with:
          tag_name: ${{ env.TAG }}
          draft: false
          prerelease: false

  publish:
    needs: setup_and_build
    runs-on: ubuntu-latest

    steps:
      - id: publish_to_pypi
        name: Publish Package to PyPI
        if: contains(github.event.head_commit.message, '.deploy')
        run: twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - id: publish_to_testpypi
        name: Publish Package to TestPyPI
        if: contains(github.event.head_commit.message, '.deploy .test')
        run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}

      - id: pypi_badge
        if: always()
        uses: schneegans/dynamic-badges-action@master
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: pypi-badge.json
          label: PyPI
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
          namedLogo: pypi
          style: flat-square

  docs:
    needs: setup_and_build
    runs-on: ubuntu-latest

    steps:
      - id: build_sphinx_docs
        uses: ammaraskar/sphinx-action@master
        with:
          docs-folder: "StenLib/docs/"

      - id: install_ssh_key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: "just-a-placeholder-so-we-dont-get-errors"

      - id: add_known_hosts
        name: Adding Known Hosts
        run: ssh-keyscan -4 -v -p ${{ secrets.SSH_HOST_PORT }} -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - id: copy_docs
        name: Copy Docs to Webserver
        run: sshpass -p '${{ secrets.SSH_KEY_PASS }}' scp -o HostKeyAlgorithms=ssh-rsa,ssh-dss -P ${{ secrets.SSH_HOST_PORT }} -r ./StenLib/docs/build/html/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_HOST_PATH }}

      - id: docs_badge
        if: always()
        uses: schneegans/dynamic-badges-action@master
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: docs-badge.json
          label: Docs
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'brightgreen' || 'red' }}
          namedLogo: googledocs
          style: flat-square
