name: Python Package Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check for keyword in commit message
        id: keyword_check
        run: echo "contains_keyword=$(echo '${{ github.event.head_commit.message }}' | grep -qP '.(deploy|test)\b' && echo true || echo false)" >> $GITHUB_ENV

      - uses: actions/checkout@main

      - name: Set up Python
        uses: actions/setup-python@main
        with:
          python-version: "3.12.0"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install twine
          pip install mypy
          pip install pytest pytest-cov

      - name: Generate .pyi stub files
        run: |
          PACKAGE_NAME=$(ls -d */ | grep -v 'dist\|build' | head -n 1 | cut -f1 -d'/')
          find $PACKAGE_NAME -name "*.py" ! -name "__init__.py" -exec stubgen -o . {} \;

      - name: Create & Push tag
        id: create_tag
        run: |
          TAG=$(echo '${{ github.event.head_commit.message }}' | grep -oP '.tag\[\K(.*?)(?=\])')
          if [ -n "$TAG" ]; then
            git tag $TAG
            git push origin $TAG
          else
            TAG="NULL"
            git tag $TAG
            git push origin $TAG
            echo "No tag found in commit message. Using default tag."
          fi
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build package
        run: python -m build

      - name: Test with pytest
        run: |
          pytest tests/ --doctest-modules --junitxml=junit/test-results.xml --cov=StenLib --cov-report=xml --cov-report=html

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.create_tag.outputs.TAG }}
        with:
          tag_name: ${{ env.TAG }}
          draft: false
          prerelease: false

      - name: Publish package to PyPI
        if: contains(github.event.head_commit.message, '.deploy')
        run: twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - name: Publish package to TestPyPI
        if: contains(github.event.head_commit.message, '.test')
        run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
